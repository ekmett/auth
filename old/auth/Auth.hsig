{-# language KindSignatures, TypeSynonymInstances, ConstraintKinds #-}
signature Auth where

import Data.Constraint

data Auth a
type M :: * -> *

instance Functor M
instance Applicative M
instance Monad M

type Evident :: * -> Constraint
ejson :: (Show a, Read a) :- Evident a
eauth :: Dict (Evident (Auth a))

auth :: Evident a => a -> Auth a
unauth :: Evident a => Auth a -> M a
